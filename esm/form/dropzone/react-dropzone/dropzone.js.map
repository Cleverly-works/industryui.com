{"version":3,"sources":["../../../../components/form/dropzone/react-dropzone/dropzone.js"],"names":["React","useEffect","useState","bool","string","useDropzone","Column","Row","Text","Accept","DropzonePreview","styled","css","Dropzone","accept","disabled","multiple","onChange","files","setFiles","forEach","file","URL","revokeObjectURL","preview","onDrop","acceptedFiles","accepted","map","Object","assign","createObjectURL","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","removeFile","newFiles","splice","indexOf","thumbs","name","length","StyledContainer","div","theme","COLOUR","light","dragAccept","dragReject","danger","success","dragActive","propTypes","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Dropzone\n * Allows a user to Upload multiple images\n */\n\n// React\nimport React, { useEffect, useState } from 'react'\nimport { bool, string } from 'prop-types'\n\n// React Dropzone\nimport { useDropzone } from 'react-dropzone'\n\n// UI\nimport { Column, Row, Text } from '../../../'\nimport { Accept } from './accept'\nimport { DropzonePreview } from './preview'\n\n// Style\nimport styled, { css } from 'styled-components'\n\nexport const Dropzone = ({ accept, disabled, multiple, onChange }) => {\n  const [files, setFiles] = useState([])\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL(file.preview))\n    },\n    [files]\n  )\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    disabled: disabled,\n    multiple: multiple,\n    onDrop: (acceptedFiles) => {\n      const accepted = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        })\n      )\n\n      setFiles(accepted)\n\n      if (onChange) {\n        onChange(accepted)\n      }\n    }\n  })\n\n  const removeFile = (file) => {\n    const newFiles = [...files]\n    newFiles.splice(newFiles.indexOf(file), 1)\n    setFiles(newFiles)\n  }\n\n  const thumbs = () => {\n    return (\n      <StyledContainer fluid>\n        <Row>\n          {files.map((file) => (\n            <Column md={3} key={file.name}>\n              <DropzonePreview\n                file={file}\n                handleRemove={() => removeFile(file)}\n                index={file.name}\n              />\n            </Column>\n          ))}\n        </Row>\n      </StyledContainer>\n    )\n  }\n\n  return (\n    <>\n      <StyledContainer\n        dragActive={isDragActive}\n        dragAccept={isDragAccept}\n        dragReject={isDragReject}\n        disabled={disabled}\n        {...getRootProps()}>\n        <input {...getInputProps()} />\n\n        {isDragAccept && <Text>Accepted</Text>}\n        {isDragReject && <Text>Rejected</Text>}\n\n        {isDragActive ? (\n          <Text>Drop here</Text>\n        ) : (\n          <>\n            <Text>Drop, or click to select</Text>\n            {accept && <Accept accept={accept} />}\n            {multiple ? (\n              <Text>Accepts multiple files</Text>\n            ) : (\n              <Text>Single file only</Text>\n            )}\n          </>\n        )}\n      </StyledContainer>\n\n      {files.length > 0 && thumbs()}\n    </>\n  )\n}\n\nconst StyledContainer = styled.div`\n  background-color: ${({ theme }) => theme.COLOUR.light};\n  border-color: ${({ dragAccept, dragReject, theme: { COLOUR } }) =>\n    (dragReject && COLOUR.danger) || (dragAccept && COLOUR.success)};\n  border-radius: 0.25rem;\n  border-style: ${({ dragActive }) => (dragActive ? 'solid' : 'dashed')};\n  border-width: 2px;\n  cursor: pointer;\n  margin-bottom: 1rem;\n  height: 25vh;\n  padding: 1rem;\n  outline: none;\n  overflow: auto;\n  text-align: center;\n  transition: border 0.24s ease-in-out;\n  width: 100%;\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      cursor: not-allowed;\n      opacity: 0.5;\n    `}\n`\n\nDropzone.propTypes = {\n  accept: string,\n  disabled: bool,\n  multiple: bool\n}\n\nDropzone.defaultProps = {\n  accept: 'image/*',\n  disabled: false,\n  multiple: true\n}\n"],"file":"dropzone.js"}