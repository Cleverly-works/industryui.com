{"version":3,"sources":["../../../components/form/reactSelect/props.js"],"names":["array","bool","func","string","number","object","oneOf","oneOfType","propTypes","async","autoFocus","backspaceRemovesValue","blurInputOnSelect","captureMenuScroll","closeMenuOnSelect","closeMenuOnScroll","components","controlShouldRenderValue","defaultValue","delimiter","escapeClearsValue","hideSelectedOptions","id","inputId","instanceId","isClearable","isDisabled","isLoading","isMulti","isRtl","isSearchable","label","loadingMessage","minMenuHeight","maxMenuHeight","menuIsOpen","menuPlacement","menuPosition","menuShouldBlockScroll","menuShouldScrollIntoView","noOptionsMessage","onBlur","onFocus","onKeyDown","onMenuOpen","onMenuClose","onMenuScrollToTop","onMenuScrollToBottom","openMenuOnFocus","openMenuOnClick","options","isRequired","pageSize","placeholder","screenReaderStatus","selectedOption","tabIndex","tabSelectsValue","defaultProps","defaultStyles","undefined","error","errors","count","styles"],"mappings":"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","sourcesContent":["/**\n * Components - Form - React Select - Props\n */\n\n// React\nimport {\n  array,\n  bool,\n  func,\n  string,\n  number,\n  object,\n  oneOf,\n  oneOfType\n} from 'prop-types'\n\nexport const propTypes = {\n  // Whether select is async or not\n  async: bool,\n\n  // Focus the control when it is mounted\n  autoFocus: bool,\n\n  // Remove the currently focused option when the user presses backspace\n  backspaceRemovesValue: bool,\n\n  // Remove focus from the input when the user selects an option (handy for dismissing the keyboard\n  // on touch devices)\n  blurInputOnSelect: bool,\n\n  // When the user reaches the top/bottom of the menu, prevent scroll on the scroll-parent\n  captureMenuScroll: bool,\n\n  // Close the select menu when the user selects an option\n  closeMenuOnSelect: bool,\n\n  // If `true`, close the select menu when the user scrolls the document/body. If a function, takes\n  // a standard javascript `ScrollEvent` you return a boolean: `true` => The menu closes\n  // `false` => The menu stays open This is useful when you have a scrollable modal and want to\n  // portal the menu out, but want to avoid graphical issues.\n  closeMenuOnScroll: oneOfType([bool, func]),\n\n  // This complex object includes all the compositional components that are used in `react-select`.\n  // If you wish to overwrite a component, pass in an object with the appropriate namespace. If you\n  // only wish to restyle a component, we recommend using the `styles` prop instead. For a list of\n  // the components that can be passed in, and the shape that will be passed to them, see\n  // [the components docs](/components)\n  components: object,\n\n  // Whether the value of the select, e.g. SingleValue, should be displayed in the control.\n  controlShouldRenderValue: bool,\n  defaultValue: oneOfType([array, object]),\n\n  // Delimiter used to join multiple values into a single HTML Input value\n  delimiter: string,\n\n  // Clear all values when the user presses escape AND the menu is closed\n  escapeClearsValue: bool,\n\n  // Hide the selected option from the menu\n  hideSelectedOptions: bool,\n\n  // The id to set on the SelectContainer component\n  id: string,\n\n  // The id of the search input\n  inputId: string,\n\n  // Define an id prefix for the select components e.g. {your-id}-value\n  instanceId: oneOfType([number, string]),\n\n  // Is the select value clearable\n  isClearable: bool,\n\n  // Is the select disabled\n  isDisabled: bool,\n\n  // Is the select in a state of loading (async)\n  isLoading: bool,\n\n  // Support multiple selected options\n  isMulti: bool,\n\n  // Is the select direction right-to-left\n  isRtl: bool,\n\n  // Whether to enable search functionality\n  isSearchable: bool,\n\n  // Label text\n  label: string,\n\n  // Async: Text to display when loading options\n  loadingMessage: func,\n\n  // Minimum height of the menu before flipping\n  minMenuHeight: number,\n\n  // Maximum height of the menu before scrolling\n  maxMenuHeight: number,\n\n  // Whether the menu is open\n  menuIsOpen: bool,\n\n  // Default placement of the menu in relation to the control. 'auto' will flip when there isn't\n  // enough space below the control.\n  menuPlacement: oneOf(['auto', 'bottom', 'top']),\n\n  // The CSS position value of the menu, when \"fixed\" extra layout management is required\n  menuPosition: oneOf(['absolute', 'fixed']),\n\n  // Whether to block scroll events when the menu is open\n  menuShouldBlockScroll: bool,\n\n  // Whether the menu should be scrolled into view when it opens\n  menuShouldScrollIntoView: bool,\n\n  // Text to display when there are no options\n  noOptionsMessage: func,\n\n  // Handle blur events on the control\n  onBlur: func,\n\n  // Handle focus events on the control\n  onFocus: func,\n\n  // Handle key down events on the select\n  onKeyDown: func,\n\n  // Handle the menu opening\n  onMenuOpen: func,\n\n  // Handle the menu closing\n  onMenuClose: func,\n\n  // Fired when the user scrolls to the top of the menu\n  onMenuScrollToTop: func,\n\n  // Fired when the user scrolls to the bottom of the menu\n  onMenuScrollToBottom: func,\n\n  // Allows control of whether the menu is opened when the Select is focused\n  openMenuOnFocus: bool,\n\n  // Allows control of whether the menu is opened when the Select is clicked\n  openMenuOnClick: bool,\n\n  // Array of options that populate the select menu\n  options: array.isRequired,\n\n  // Number of options to jump in menu when page{up|down} keys are used\n  pageSize: number,\n\n  // Placeholder for the select value\n  placeholder: string,\n\n  // Status to relay to screen readers\n  screenReaderStatus: func,\n\n  // The value of the select; reflected by the selected option\n  selectedOption: oneOfType([array, object]),\n\n  // Sets the tabIndex attribute on the input\n  tabIndex: string,\n\n  // Select the currently focused option when the user presses tab\n  tabSelectsValue: bool\n}\n\nexport const defaultProps = (defaultStyles) => ({\n  backspaceRemovesValue: true,\n  closeMenuOnSelect: true,\n  closeMenuOnScroll: false,\n  components: {},\n  controlShouldRenderValue: true,\n  defaultValue: undefined,\n  error: '',\n  errors: {},\n  escapeClearsValue: false,\n  isDisabled: false,\n  isLoading: false,\n  isMulti: false,\n  isRtl: false,\n  isSearchable: true,\n  loadingMessage: () => 'Loading...',\n  maxMenuHeight: 300,\n  minMenuHeight: 140,\n  menuPlacement: 'bottom',\n  menuPosition: 'absolute',\n  menuShouldBlockScroll: false,\n  noOptionsMessage: () => 'No options',\n  openMenuOnFocus: false,\n  openMenuOnClick: true,\n  options: [],\n  pageSize: 5,\n  placeholder: 'Select...',\n  screenReaderStatus: ({ count }) =>\n    `${count} result${count !== 1 ? 's' : ''} available`,\n  styles: defaultStyles,\n  tabIndex: '0',\n  tabSelectsValue: true\n})\n"],"file":"props.js"}