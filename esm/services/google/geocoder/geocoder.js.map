{"version":3,"sources":["../../../../components/services/google/geocoder/geocoder.js"],"names":["axios","GeoCoder","apiKey","debug","language","region","GOOGLE_API_URL","message","warn","console","info","url","get","Promise","reject","Error","response","data","status","log","statusText","address","city","location","encodeURIComponent","handleUrl","results","result","geometry","lat","lng","coordinates","resolve"],"mappings":"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","sourcesContent":["/**\n * Google - GeoCoder\n */\n\n// Axios\nimport axios from 'axios'\n\nexport class GeoCoder {\n  constructor({ apiKey, debug = false, language, region }) {\n    this.apiKey = apiKey\n    this.debug = debug\n    this.language = language\n    this.region = region\n    this.GOOGLE_API_URL = 'https://maps.google.com/maps/api/geocode/json'\n  }\n\n  log(message, warn = false) {\n    if (this.debug) {\n      if (warn) {\n        console.warn(message)\n      } else {\n        console.info(message)\n      }\n    }\n  }\n\n  async handleUrl(url) {\n    const response = await axios\n      .get(url)\n      .catch(() => Promise.reject(new Error('Error fetching data')))\n\n    if (response.data.status === 'OK') {\n      this.log(response.data)\n      return response.data\n    }\n\n    this.log(\n      `${response.statusText}.\\nServer returned status code ${response.statusText}`,\n      true\n    )\n\n    return Promise.reject(\n      new Error(\n        `${response.statusText}.\\nServer returned status code ${response.statusText}`\n      )\n    )\n  }\n\n  async fromAddress({ address, city = '' }) {\n    if (!address) {\n      this.log('Provided address is invalid', true)\n      return Promise.reject(new Error('Provided address is invalid'))\n    }\n\n    const location = encodeURIComponent(city + ', ' + address)\n\n    let url = `${this.GOOGLE_API_URL}?address=${location}`\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`\n    }\n\n    if (this.region) {\n      url += `&region=${encodeURIComponent(this.region)}`\n    }\n\n    const {\n      results: [result]\n    } = await this.handleUrl(url)\n\n    const {\n      geometry: {\n        location: { lat, lng }\n      }\n    } = result\n\n    const coordinates = { lat, lng }\n    return Promise.resolve(coordinates)\n  }\n}\n"],"file":"geocoder.js"}