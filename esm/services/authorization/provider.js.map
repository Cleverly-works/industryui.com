{"version":3,"sources":["../../../components/services/authorization/provider.js"],"names":["React","useContext","useEffect","useState","Router","useRouter","AuthorizationContext","ConfigContext","UserContext","AuthorizationProvider","children","isLoading","setIsLoading","user","router","AccessPages","AccessRules","permissions","role","pathname","includes","push","hasAccess","rule","options","userId","id","checkRole","split","type","subtype","startsWith","hasRole","Array","isArray","some"],"mappings":"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","sourcesContent":["/**\n * Providers - Authorization\n */\n\n// React\nimport React, { useContext, useEffect, useState } from 'react'\n\n// Next\nimport Router, { useRouter } from 'next/router'\n\n// UI\nimport { AuthorizationContext, ConfigContext, UserContext } from '../../'\n\nexport const AuthorizationProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  const { user } = useContext(UserContext)\n  const router = useRouter()\n\n  const { AccessPages, AccessRules } = useContext(ConfigContext)\n\n  const permissions = user && user.role ? AccessRules[user.role] : []\n\n  // Check if the user is allowed page access\n  useEffect(() => {\n    if (router.pathname !== '/403') {\n      if (!AccessPages[router.pathname]) {\n        // Allow access to non-protected page\n        setIsLoading(false)\n      } else if (\n        user &&\n        AccessPages[router.pathname] &&\n        AccessPages[router.pathname].includes(user.role)\n      ) {\n        // Allow access to protected page when role is assigned\n        setIsLoading(false)\n      } else {\n        // Not authorized, redirect to /403 page\n        Router.push('/403')\n      }\n    } else {\n      setIsLoading(false)\n    }\n  }, [router.pathname])\n\n  const hasAccess = (rule, options = {}) => {\n    if (typeof permissions[rule] === 'boolean') {\n      return permissions[rule]\n    } else if (typeof permissions[rule] === 'function') {\n      options.userId = user && user.id ? user.id : null\n      return permissions[rule](options)\n    } else {\n      return false\n    }\n  }\n\n  const checkRole = (role) => {\n    // check\n    const [type, subtype] = role.split('_')\n\n    if (subtype) {\n      switch (subtype) {\n        case 'owner':\n          return user.role === type + '_owner'\n        case 'manager':\n          return (\n            user.role === type + '_owner' || user.role === type + '_manager'\n          )\n        case 'user':\n          return user.role.startsWith(type)\n        default:\n          return false\n      }\n    } else {\n      return user.role.startsWith(type)\n    }\n  }\n\n  const hasRole = (role) => {\n    if (user && user.role) {\n      if (Array.isArray(role)) {\n        return role.some(checkRole)\n      } else {\n        return checkRole(role)\n      }\n    }\n    return false\n  }\n\n  return (\n    !isLoading && (\n      <AuthorizationContext.Provider\n        value={{\n          hasAccess,\n          hasRole\n        }}>\n        {children}\n      </AuthorizationContext.Provider>\n    )\n  )\n}\n"],"file":"provider.js"}