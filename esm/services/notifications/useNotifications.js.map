{"version":3,"sources":["../../../components/services/notifications/useNotifications.js"],"names":["useSubscription","gql","useNotifications","url","params","seconds","GET_NOTIFICATIONS","variables","userId","data","items"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,eAAT,QAAgC,gBAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAoC;AAAA,MAA9BC,MAA8B,uEAArB,EAAqB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAClE;AAEA;AACA;AACA;AAEA,MAAMC,iBAAiB,GAAGL,GAAH,iVAAvB;;AAPkE,yBAwB9DD,eAAe,CAACM,iBAAD,EAAoB;AACrCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE;AADC;AAD0B,GAApB,CAxB+C;AAAA,+CAqBhEC,IArBgE;;AAAA,6DAqB9C;AAChBC,IAAAA,KAAK,EAAE;AADS,GArB8C;AAAA,MAqBxDA,KArBwD,yBAqBxDA,KArBwD,EA8BlE;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,SAAOA,KAAP;AACD,CAjDM","sourcesContent":["/**\n * Services - Hooks  - useNotifications\n *\n * id - integer, primary key, unique, default: nextval('\"Notification_id_seq1\"'::regclass)\n * status - character varying, nullable\n * createdAt - timestamp without time zone, nullable, default: now()\n * updatedAt - timestamp without time zone, nullable\n * archivedAt - timestamp without time zone, nullable\n * communicationId - integer\n * userId - integer\n */\n\n// Apollo\nimport { useSubscription } from '@apollo/client'\nimport gql from 'graphql-tag'\n\nexport const useNotifications = (url, params = {}, seconds = 60) => {\n  // const [data, setData] = useState({ messages: [] })\n\n  // if (!url) {\n  //   return { data }\n  // }\n\n  const GET_NOTIFICATIONS = gql`\n    subscription GetNotifications($userId: Int) {\n      items: Notification(where: { userId: { _eq: $userId } }) {\n        id\n        notification: Communication {\n          message: content\n          priority\n          createdAt\n        }\n      }\n    }\n  `\n\n  const {\n    data: { items } = {\n      items: []\n    }\n  } = useSubscription(GET_NOTIFICATIONS, {\n    variables: {\n      userId: 48\n    }\n  })\n\n  // const fetchNotifications = async () => {\n  //   const res = await Api.get(url, params)\n\n  //   if (res.status === 200 && res.data.messages) {\n  //     window.localStorage.setItem('active-notifications', JSON.stringify(res.data.messages))\n  //     setData({ notifications: res.data.messages })\n  //   }\n  // }\n\n  // useInterval(() => {\n  //   fetchNotifications()\n  // }, seconds * 1000)\n\n  // useEffect(() => {\n  //   fetchNotifications()\n  // }, [])\n\n  // return { data, fetchNotifications }\n  return items\n}\n"],"file":"useNotifications.js"}