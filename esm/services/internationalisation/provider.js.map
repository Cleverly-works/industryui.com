{"version":3,"sources":["../../../components/services/internationalisation/provider.js"],"names":["React","useContext","useEffect","useState","useRouter","ConfigContext","InternationalisationContext","isLocale","useLocalStorage","InternationalisationProvider","locale","children","locales","getStoredLocale","setStoredLocale","router","localeState","setLocaleState","test","query","lang","setLocale"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD,C,CAEA;;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AACA,SACEC,aADF,EAEEC,2BAFF,EAGEC,QAHF,EAIEC,eAJF,QAKO,QALP;AAOA,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,OAA0B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBAChDV,UAAU,CAACI,aAAD,CADsC;AAAA,MAC5DO,OAD4D,eAC5DA,OAD4D;;AAAA,yBAEzBJ,eAAe,CAAC,QAAD,CAFU;AAAA;AAAA,MAE7DK,eAF6D;AAAA,MAE5CC,eAF4C;;AAIpE,MAAMC,MAAM,GAAGX,SAAS,EAAxB;;AAJoE,kBAK9BD,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAEA;AAAV,GAAD,CALsB;AAAA;AAAA,MAK7DM,WAL6D;AAAA,MAKhDC,cALgD;;AAOpEf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,WAAW,KAAKH,eAApB,EAAqC;AACnCC,MAAAA,eAAe,CAACE,WAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACA,WAAD,CAJM,CAAT;AAMAd,EAAAA,SAAS,CAAC,YAAM;AACd,QACEK,QAAQ,CAAC;AAAEK,MAAAA,OAAO,EAAEA,OAAX;AAAoBM,MAAAA,IAAI,EAAEH,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEI,KAAR,CAAcC;AAAxC,KAAD,CAAR,IACAV,MAAM,MAAKK,MAAL,aAAKA,MAAL,uBAAKA,MAAM,CAAEI,KAAR,CAAcC,IAAnB,CAFR,EAGE;AACAH,MAAAA,cAAc,CAAC;AAAEP,QAAAA,MAAM,EAAEK,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEI,KAAR,CAAcC;AAAxB,OAAD,CAAd;AACD;AACF,GAPQ,EAON,CAACL,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEI,KAAR,CAAcC,IAAf,EAAqBJ,WAArB,CAPM,CAAT;AASA,sBACE,oBAAC,2BAAD,CAA6B,QAA7B;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,MAAM,EAAEM,WAAW,CAACN,MAAtB;AAA8BW,MAAAA,SAAS,EAAEJ;AAAzC;AADT,KAEGN,QAFH,CADF;AAMD,CA5BM;AAAMF,4B","sourcesContent":["/**\n * Services - Internationalisation - Provider\n */\n\n// React\nimport React, { useContext, useEffect, useState } from 'react'\n\n// Next\nimport { useRouter } from 'next/router'\n\n// UI\nimport {\n  ConfigContext,\n  InternationalisationContext,\n  isLocale,\n  useLocalStorage\n} from '../../'\n\nexport const InternationalisationProvider = ({ locale, children }) => {\n  const { locales } = useContext(ConfigContext)\n  const [getStoredLocale, setStoredLocale] = useLocalStorage('locale')\n\n  const router = useRouter()\n  const [localeState, setLocaleState] = useState({ locale: locale })\n\n  useEffect(() => {\n    if (localeState !== getStoredLocale) {\n      setStoredLocale(localeState)\n    }\n  }, [localeState])\n\n  useEffect(() => {\n    if (\n      isLocale({ locales: locales, test: router?.query.lang }) &&\n      locale !== router?.query.lang\n    ) {\n      setLocaleState({ locale: router?.query.lang })\n    }\n  }, [router?.query.lang, localeState])\n\n  return (\n    <InternationalisationContext.Provider\n      value={{ locale: localeState.locale, setLocale: setLocaleState }}>\n      {children}\n    </InternationalisationContext.Provider>\n  )\n}\n"],"file":"provider.js"}