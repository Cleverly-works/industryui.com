{"version":3,"sources":["../../../components/services/getAddress/index.js"],"names":["axios","func","number","string","getAddressesApi","apiKey","postCode","get","data","response","hasError","timeout","getAddresses","callFunc","callback","callThrottle","validator","clearTimeout","setTimeout","isValid","then","res","addressStringSeparator","fixAddresses","addresses","map","addressString","elements","split","filter","part","join","item","index","name","id","GetAddressService","propTypes","isRequired"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,QAAqC,YAArC;;AAEA,IAAMC,eAAe;AAAA,sEAAG,iBAAOC,MAAP,EAAeC,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEGN,KAAK,CAACO,GAAN,0CACaD,QADb,sBACiCD,MADjC,EAFH;;AAAA;AAAA;AAEZG,YAAAA,IAFY,oBAEZA,IAFY;AAAA,6CAKb;AAAEC,cAAAA,QAAQ,EAAED,IAAZ;AAAkBE,cAAAA,QAAQ,EAAE;AAA5B,aALa;;AAAA;AAAA;AAAA;AAAA,6CAOb;AAAED,cAAAA,QAAQ,EAAE,kCAAZ;AAAgDC,cAAAA,QAAQ,EAAE;AAA1D,aAPa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfN,eAAe;AAAA;AAAA;AAAA,GAArB;;AAWA,IAAIO,OAAJ;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,QAMf;AAAA,MALJP,MAKI,SALJA,MAKI;AAAA,MAJMQ,QAIN,SAJJC,QAII;AAAA,MAHJC,YAGI,SAHJA,YAGI;AAAA,MAFJT,QAEI,SAFJA,QAEI;AAAA,MADJU,SACI,SADJA,SACI;AACJC,EAAAA,YAAY,CAACN,OAAD,CAAZ;AACAA,EAAAA,OAAO,GAAGO,UAAU,CAAC,YAAM;AACzB,QAAMC,OAAO,GAAGH,SAAS,CAACV,QAAD,CAAzB;;AACA,QAAIa,OAAJ,EAAa;AACX,UAAMX,IAAI,GAAGJ,eAAe,CAACC,MAAD,EAASC,QAAT,CAA5B;AACAE,MAAAA,IAAI,CAACY,IAAL,CAAU,UAACC,GAAD,EAAS;AACjBR,QAAAA,QAAQ,CAACQ,GAAD,CAAR;AACD,OAFD;AAGD,KALD,MAKO;AACLR,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,QAAQ,EAAE,qBAAZ;AAAmCC,QAAAA,QAAQ,EAAE;AAA7C,OAAD,CAAR;AACD;AACF,GAVmB,EAUjBK,YAViB,CAApB;AAWD,CAnBD;;AAqBA,IAAMO,sBAAsB,GAAG,IAA/B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAe;AAClC,SAAOA,SAAS,CACbC,GADI,CACA,UAACC,aAAD,EAAmB;AACtB,QAAMC,QAAQ,GAAGD,aAAa,CAC3BE,KADc,CACRN,sBADQ,EAEdO,MAFc,CAEP,UAACC,IAAD,EAAU;AAChB,aAAOA,IAAI,KAAK,EAAhB;AACD,KAJc,CAAjB;AAKA,WAAOH,QAAQ,CAACI,IAAT,CAAc,IAAd,CAAP;AACD,GARI,EASJN,GATI,CASA,UAACO,IAAD,EAAOC,KAAP,EAAiB;AACpB,WAAO;AAAEC,MAAAA,IAAI,EAAEF,IAAR;AAAcG,MAAAA,EAAE,EAAEF;AAAlB,KAAP;AACD,GAXI,CAAP;AAYD,CAbD;;AAeA,OAAO,IAAMG,iBAAiB,GAAG;AAAEb,EAAAA,YAAY,EAAZA,YAAF;AAAgBX,EAAAA,YAAY,EAAZA,YAAhB;AAA8BR,EAAAA,eAAe,EAAfA;AAA9B,CAA1B;AAEPQ,YAAY,CAACyB,SAAb,GAAyB;AACvBvB,EAAAA,QAAQ,EAAEb,IAAI,CAACqC,UADQ;AAEvBvB,EAAAA,YAAY,EAAEb,MAAM,CAACoC,UAFE;AAGvBhC,EAAAA,QAAQ,EAAEH,MAAM,CAACmC,UAHM;AAIvBtB,EAAAA,SAAS,EAAEf,IAAI,CAACqC;AAJO,CAAzB","sourcesContent":["// Axios\nimport axios from 'axios'\n\n// React\nimport { func, number, string } from 'prop-types'\n\nconst getAddressesApi = async (apiKey, postCode) => {\n  try {\n    const { data } = await axios.get(\n      `https://api.getAddress.io/find/${postCode}?api-key=${apiKey}`\n    )\n    return { response: data, hasError: false }\n  } catch (error) {\n    return { response: 'Error While Getting Address List', hasError: true }\n  }\n}\n\nlet timeout\n\nconst getAddresses = ({\n  apiKey,\n  callback: callFunc,\n  callThrottle,\n  postCode,\n  validator\n}) => {\n  clearTimeout(timeout)\n  timeout = setTimeout(() => {\n    const isValid = validator(postCode)\n    if (isValid) {\n      const data = getAddressesApi(apiKey, postCode)\n      data.then((res) => {\n        callFunc(res)\n      })\n    } else {\n      callFunc({ response: 'Invalid Postal Code', hasError: true })\n    }\n  }, callThrottle)\n}\n\nconst addressStringSeparator = ', '\n\nconst fixAddresses = (addresses) => {\n  return addresses\n    .map((addressString) => {\n      const elements = addressString\n        .split(addressStringSeparator)\n        .filter((part) => {\n          return part !== ''\n        })\n      return elements.join(', ')\n    })\n    .map((item, index) => {\n      return { name: item, id: index }\n    })\n}\n\nexport const GetAddressService = { fixAddresses, getAddresses, getAddressesApi }\n\ngetAddresses.propTypes = {\n  callback: func.isRequired,\n  callThrottle: number.isRequired,\n  postCode: string.isRequired,\n  validator: func.isRequired\n}\n"],"file":"index.js"}