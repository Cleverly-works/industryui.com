{"version":3,"sources":["../../../../components/organisms/editor/draftJs/draftJs.js"],"names":["React","useState","Controller","Editor","EditorState","RichUtils","BlockType","DraftJs","control","name","setValue","createEmpty","editorState","setEditorState","toggleInlineStyle","event","preventDefault","style","currentTarget","getAttribute","handleKeyCommand","command","newEditorState","handleOnChange","getCurrentContent","getPlainText","props","myBlockStyleFn","contentBlock","type","getType","BLOCKQUOTE","undefined"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,SAASC,UAAT,QAA2B,iBAA3B,C,CAEA;;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,QAA+C,UAA/C;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAiC;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAChBT,QAAQ,CAACG,WAAW,CAACO,WAAZ,EAAD,CADQ;AAAA;AAAA,MAC/CC,WAD+C;AAAA,MAClCC,cADkC;;AAGtD,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,aAAN,CAAoBC,YAApB,CAAiC,YAAjC,CAAd;AACAN,IAAAA,cAAc,CAACR,SAAS,CAACS,iBAAV,CAA4BF,WAA5B,EAAyCK,KAAzC,CAAD,CAAd;AACD,GAJD;;AAMA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAUT,WAAV,EAA0B;AACjD,QAAMU,cAAc,GAAGjB,SAAS,CAACe,gBAAV,CAA2BR,WAA3B,EAAwCS,OAAxC,CAAvB;;AACA,QAAIC,cAAJ,EAAoB;AAClBT,MAAAA,cAAc,CAACS,cAAD,CAAd;AACA,aAAO,SAAP;AACD;;AACD,WAAO,aAAP;AACD,GAPD;;AAQA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACD,cAAD,EAAoB;AACzCT,IAAAA,cAAc,CAACS,cAAD,CAAd,CADyC,CAEzC;AACA;;AACAZ,IAAAA,QAAQ,CAACD,IAAD,EAAOa,cAAc,CAACE,iBAAf,GAAmCC,YAAnC,CAAgD,MAAhD,CAAP,CAAR;AACD,GALD,CAjBsD,CAuBtD;;;AACA,sBACE,uDACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,kBAAW,MAHb;AAIE,IAAA,WAAW,EAAEX;AAJf,IADF,eAOE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,kBAAW,QAHb;AAIE,IAAA,WAAW,EAAEA;AAJf,IAPF,eAaE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,kBAAW,eAHb;AAIE,IAAA,WAAW,EAAEA;AAJf,IAbF,eAmBE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,kBAAW,WAHb;AAIE,IAAA,WAAW,EAAEA;AAJf,IAnBF,eAyBE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEL,IADR;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,MAAM,EAAE,gBAACkB,KAAD;AAAA,0BACN,oBAAC,MAAD;AACE,QAAA,WAAW,EAAEd,WADf;AAEE,QAAA,YAAY,EAAEe,cAFhB;AAGE,QAAA,gBAAgB,EAAEP,gBAHpB;AAIE,QAAA,QAAQ,EAAEG;AAJZ,QADM;AAAA;AAHV,IAzBF,CADF;AAwCD,CAhEM;;AAkEP,SAASI,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,MAAMC,IAAI,GAAGD,YAAY,CAACE,OAAb,EAAb;;AACA,MAAID,IAAI,KAAKvB,SAAS,CAACyB,UAAvB,EAAmC;AACjC;AACA,WAAOC,SAAP;AACD;AACF","sourcesContent":["/**\n * Editor\n */\n\n// React\nimport React, { useState } from 'react'\n\n// React Hook Form\nimport { Controller } from 'react-hook-form'\n\n// Draft JS\nimport { Editor, EditorState, RichUtils } from 'draft-js'\nimport { BlockType } from './constants'\n\nexport const DraftJs = ({ control, name, setValue }) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty())\n\n  const toggleInlineStyle = (event) => {\n    event.preventDefault()\n    const style = event.currentTarget.getAttribute('data-style')\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style))\n  }\n\n  const handleKeyCommand = (command, editorState) => {\n    const newEditorState = RichUtils.handleKeyCommand(editorState, command)\n    if (newEditorState) {\n      setEditorState(newEditorState)\n      return 'handled'\n    }\n    return 'not-handled'\n  }\n  const handleOnChange = (newEditorState) => {\n    setEditorState(newEditorState)\n    // This is returning the current plain Value, we will have to see if we will get back the whole\n    // State and then write a parser or how we will manage that\n    setValue(name, newEditorState.getCurrentContent().getPlainText('\\u0001'))\n  }\n  // TODO: Do the inputList dynamic creating a map with the Key-Value to generate the needed\n  return (\n    <>\n      <input\n        type=\"button\"\n        value=\"B\"\n        data-style=\"BOLD\"\n        onMouseDown={toggleInlineStyle}\n      />\n      <input\n        type=\"button\"\n        value=\"I\"\n        data-style=\"ITALIC\"\n        onMouseDown={toggleInlineStyle}\n      />\n      <input\n        type=\"button\"\n        value=\"S\"\n        data-style=\"STRIKETHROUGH\"\n        onMouseDown={toggleInlineStyle}\n      />\n      <input\n        type=\"button\"\n        value=\"U\"\n        data-style=\"UNDERLINE\"\n        onMouseDown={toggleInlineStyle}\n      />\n      <Controller\n        name={name}\n        control={control}\n        render={(props) => (\n          <Editor\n            editorState={editorState}\n            blockStyleFn={myBlockStyleFn}\n            handleKeyCommand={handleKeyCommand}\n            onChange={handleOnChange}\n          />\n        )}\n      />\n    </>\n  )\n}\n\nfunction myBlockStyleFn(contentBlock) {\n  const type = contentBlock.getType()\n  if (type === BlockType.BLOCKQUOTE) {\n    // TODO: return the right css according to be applied into the whole block\n    return undefined\n  }\n}\n"],"file":"draftJs.js"}