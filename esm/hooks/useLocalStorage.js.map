{"version":3,"sources":["../../components/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","parse","item","a","JSON","e","window","localStorage","getItem","error","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify","console"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,YAAN,EAAuB;AACpD,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAU;AACtB,QAAIC,CAAC,GAAGD,IAAR;;AAEA,QAAI;AACFC,MAAAA,CAAC,GAAGC,IAAI,CAACH,KAAL,CAAWC,IAAX,CAAJ;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU,CAAE;;AAEd,WAAOF,CAAP;AACD,GARD,CADoD,CAWpD;AACA;;;AAZoD,kBAadN,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF;AACA,UAAMK,IAAI,GAAGI,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,GAA5B,CAAb,CAFE,CAIF;;AACA,aAAOG,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiBF,YAA5B;AACD,KAND,CAME,OAAOS,KAAP,EAAc;AACd;AACA,aAAOT,YAAP;AACD;AACF,GAX6C,CAbM;AAAA;AAAA,MAa7CU,WAb6C;AAAA,MAahCC,cAbgC,kBA0BpD;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAKF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CANE,CAQF;;AACAR,MAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4BjB,GAA5B,EAAiCK,IAAI,CAACa,SAAL,CAAeH,YAAf,CAAjC;AACD,KAVD,CAUE,OAAOL,KAAP,EAAc;AACd;AACAS,MAAAA,OAAO,CAACT,KAAR,CAAcA,KAAd;AACD;AACF,GAfD;;AAiBA,SAAO,CAACC,WAAD,EAAcE,QAAd,CAAP;AACD,CA9CM","sourcesContent":["/**\n * Hooks - Use Local Storage\n */\n\n// React\nimport { useState } from 'react'\n\nexport const useLocalStorage = (key, initialValue) => {\n  const parse = (item) => {\n    let a = item\n\n    try {\n      a = JSON.parse(item)\n    } catch (e) {}\n\n    return a\n  }\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n      return item ? parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      // Save state\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"],"file":"useLocalStorage.js"}