{"version":3,"sources":["../../components/hooks/useWhyDidYouUpdate.js"],"names":["useEffect","useRef","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","Object","keys","changesObj","forEach","key","from","to","length","console","error"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC,C,CAEA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AAC9C;AACA;AACA,MAAMC,aAAa,GAAGJ,MAAM,EAA5B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,aAAa,CAACC,OAAlB,EAA2B;AACzB;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,iCAAiBJ,aAAa,CAACC,OAA/B,GAA2CF,KAA3C,EAAhB,CAFyB,CAGzB;;AACA,UAAMM,UAAU,GAAG,EAAnB,CAJyB,CAKzB;;AACAH,MAAAA,OAAO,CAACI,OAAR,CAAgB,UAACC,GAAD,EAAS;AACvB;AACA,YAAIP,aAAa,CAACC,OAAd,CAAsBM,GAAtB,MAA+BR,KAAK,CAACQ,GAAD,CAAxC,EAA+C;AAC7C;AACAF,UAAAA,UAAU,CAACE,GAAD,CAAV,GAAkB;AAChBC,YAAAA,IAAI,EAAER,aAAa,CAACC,OAAd,CAAsBM,GAAtB,CADU;AAEhBE,YAAAA,EAAE,EAAEV,KAAK,CAACQ,GAAD;AAFO,WAAlB;AAID;AACF,OATD,EANyB,CAiBzB;;AACA,UAAIJ,MAAM,CAACC,IAAP,CAAYC,UAAZ,EAAwBK,MAA5B,EAAoC;AAClCC,QAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCd,IAAtC,EAA4CO,UAA5C;AACD;AACF,KAtBa,CAwBd;;;AACAL,IAAAA,aAAa,CAACC,OAAd,GAAwBF,KAAxB;AACD,GA1BQ,CAAT;AA2BD","sourcesContent":["/**\n * Why did you update\n */\n\n// React\nimport { useEffect, useRef } from 'react'\n\n// Hook\nexport function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  const previousProps = useRef()\n\n  useEffect(() => {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      // Use this object to keep track of changed props\n      const changesObj = {}\n      // Iterate through keys\n      allKeys.forEach((key) => {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          }\n        }\n      })\n\n      // If changesObj not empty then output\n      if (Object.keys(changesObj).length) {\n        console.error('[why-did-you-update]', name, changesObj)\n      }\n    }\n\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props\n  })\n}\n"],"file":"useWhyDidYouUpdate.js"}