{"version":3,"sources":["../../components/hooks/useScript.js"],"names":["useState","useEffect","cachedScripts","useScript","src","loaded","error","state","setState","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAMC,aAAa,GAAG,EAAtB;AAEA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AAC7B;AAD6B,kBAEHJ,QAAQ,CAAC;AACjCK,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,KAAK,EAAE;AAF0B,GAAD,CAFL;AAAA;AAAA,MAEtBC,KAFsB;AAAA,MAEfC,QAFe;;AAO7BP,EAAAA,SAAS,CACP,YAAM;AACJ;AACA;AACA,QAAIC,aAAa,CAACO,QAAd,CAAuBL,GAAvB,CAAJ,EAAiC;AAC/BI,MAAAA,QAAQ,CAAC;AACPH,QAAAA,MAAM,EAAE,IADD;AAEPC,QAAAA,KAAK,EAAE;AAFA,OAAD,CAAR;AAID,KALD,MAKO;AACLJ,MAAAA,aAAa,CAACQ,IAAd,CAAmBN,GAAnB,EADK,CAGL;;AACA,UAAMO,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACP,GAAP,GAAaA,GAAb;AACAO,MAAAA,MAAM,CAACG,KAAP,GAAe,IAAf,CANK,CAQL;;AACA,UAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBP,QAAAA,QAAQ,CAAC;AACPH,UAAAA,MAAM,EAAE,IADD;AAEPC,UAAAA,KAAK,EAAE;AAFA,SAAD,CAAR;AAID,OALD;;AAOA,UAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B;AACA,YAAMC,KAAK,GAAGf,aAAa,CAACgB,OAAd,CAAsBd,GAAtB,CAAd;AACA,YAAIa,KAAK,IAAI,CAAb,EAAgBf,aAAa,CAACiB,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AAChBN,QAAAA,MAAM,CAACS,MAAP;AAEAZ,QAAAA,QAAQ,CAAC;AACPH,UAAAA,MAAM,EAAE,IADD;AAEPC,UAAAA,KAAK,EAAE;AAFA,SAAD,CAAR;AAID,OAVD;;AAYAK,MAAAA,MAAM,CAACU,gBAAP,CAAwB,MAAxB,EAAgCN,YAAhC;AACAJ,MAAAA,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiCL,aAAjC,EA7BK,CA+BL;;AACAJ,MAAAA,QAAQ,CAACU,IAAT,CAAcC,WAAd,CAA0BZ,MAA1B,EAhCK,CAkCL;;AACA,aAAO,YAAM;AACXA,QAAAA,MAAM,CAACa,mBAAP,CAA2B,MAA3B,EAAmCT,YAAnC;AACAJ,QAAAA,MAAM,CAACa,mBAAP,CAA2B,OAA3B,EAAoCR,aAApC;AACD,OAHD;AAID;AACF,GAjDM,EAkDP,CAACZ,GAAD,CAlDO,CAkDD;AAlDC,GAAT;AAqDA,SAAO,CAACG,KAAK,CAACF,MAAP,EAAeE,KAAK,CAACD,KAArB,CAAP;AACD","sourcesContent":["/**\n * Use Script\n * This hook makes it easy to dynamically load an external script and know when\n * its loaded.\n *\n * @see https://usehooks.com/\n */\n\n// React\nimport { useState, useEffect } from 'react'\n\n// // Usage\n// function App () {\n//   const [loaded, error] = useScript(\n//     'https://pm28k14qlj.codesandbox.io/test-external-script.js'\n//   )\n\n//   return (\n//     <div>\n//       <div>\n//         Script loaded: <b>{loaded.toString()}</b>\n//       </div>\n//       {loaded && !error && (\n//         <div>\n//           Script function call response: <b>{TEST_SCRIPT.start()}</b>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// Hook\nconst cachedScripts = []\n\nexport function useScript(src) {\n  // Keeping track of script loaded and error state\n  const [state, setState] = useState({\n    loaded: false,\n    error: false\n  })\n\n  useEffect(\n    () => {\n      // If cachedScripts array already includes src that means another instance ...\n      // ... of this hook already loaded this script, so no need to load again.\n      if (cachedScripts.includes(src)) {\n        setState({\n          loaded: true,\n          error: false\n        })\n      } else {\n        cachedScripts.push(src)\n\n        // Create script\n        const script = document.createElement('script')\n        script.src = src\n        script.async = true\n\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n          setState({\n            loaded: true,\n            error: false\n          })\n        }\n\n        const onScriptError = () => {\n          // Remove from cachedScripts we can try loading again\n          const index = cachedScripts.indexOf(src)\n          if (index >= 0) cachedScripts.splice(index, 1)\n          script.remove()\n\n          setState({\n            loaded: true,\n            error: true\n          })\n        }\n\n        script.addEventListener('load', onScriptLoad)\n        script.addEventListener('error', onScriptError)\n\n        // Add script to document body\n        document.body.appendChild(script)\n\n        // Remove event listeners on cleanup\n        return () => {\n          script.removeEventListener('load', onScriptLoad)\n          script.removeEventListener('error', onScriptError)\n        }\n      }\n    },\n    [src] // Only re-run effect if script src changes\n  )\n\n  return [state.loaded, state.error]\n}\n"],"file":"useScript.js"}