{"version":3,"sources":["../../../components/molecules/csv/index.js"],"names":["React","func","object","FormField","PapaParse","CSVReader","onError","onFileLoaded","parserOptions","change","e","reader","window","FileReader","filename","target","files","name","onload","event","csvData","parse","result","Object","assign","error","data","readAsText","propTypes","isRequired"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,YAA7B,C,CAEA;;AACA,SAASC,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA8C;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AACrE,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD,EAAO;AACpB,QAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;AACA,QAAMC,QAAQ,GAAGJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,EAAkBC,IAAnC;;AAEAN,IAAAA,MAAM,CAACO,MAAP,GAAgB,UAACC,KAAD,EAAW;AACzB,UAAMC,OAAO,GAAGhB,SAAS,CAACiB,KAAV,CACdF,KAAK,CAACJ,MAAN,CAAaO,MADC,EAEdC,MAAM,CAACC,MAAP,CAAchB,aAAd,EAA6B;AAC3BiB,QAAAA,KAAK,EAAEnB;AADoB,OAA7B,CAFc,CAAhB;AAOAC,MAAAA,YAAY,CAACa,OAAO,CAACM,IAAT,EAAeZ,QAAf,CAAZ;AACD,KATD;;AAWAH,IAAAA,MAAM,CAACgB,UAAP,CAAkBjB,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAAlB;AACD,GAhBD;;AAkBA,sBACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAC,gBADT;AAEE,IAAA,EAAE,EAAC,SAFL;AAGE,IAAA,KAAK,EAAC,YAHR;AAIE,IAAA,QAAQ,EAAEP,MAJZ;AAKE,IAAA,IAAI,EAAC;AALP,IADF;AASD,CA5BM;AAAMJ,S;AA8BbA,SAAS,CAACuB,SAAV,GAAsB;AACpBrB,EAAAA,YAAY,EAAEN,IAAI,CAAC4B,UADC;AAEpBvB,EAAAA,OAAO,EAAEL,IAFW;AAGpBO,EAAAA,aAAa,EAAEN;AAHK,CAAtB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * CSV Reader\n *\n * @see https://www.papaparse.com/\n * @see https://github.com/nzambello/react-csv-reader\n */\n\n// React\nimport React from 'react'\nimport { func, object } from 'prop-types'\n\n// UI\nimport { FormField } from '../../'\n\n// Papa parse\nimport PapaParse from 'papaparse'\n\nexport const CSVReader = ({ onError, onFileLoaded, parserOptions }) => {\n  const change = (e) => {\n    const reader = new window.FileReader()\n    const filename = e.target.files[0].name\n\n    reader.onload = (event) => {\n      const csvData = PapaParse.parse(\n        event.target.result,\n        Object.assign(parserOptions, {\n          error: onError\n        })\n      )\n\n      onFileLoaded(csvData.data, filename)\n    }\n\n    reader.readAsText(e.target.files[0])\n  }\n\n  return (\n    <FormField\n      accept=\".csv, text/csv\"\n      id=\"inputId\"\n      label=\"CSV Upload\"\n      onChange={change}\n      type=\"file\"\n    />\n  )\n}\n\nCSVReader.propTypes = {\n  onFileLoaded: func.isRequired,\n  onError: func,\n  parserOptions: object\n}\n\n//   label,\n//   inputId = null,\n//   inputStyle = {},\n//   parserOptions = {}\n// }) => {\n//   let fileContent\n\n//   const change = e => {\n//     let reader = new FileReader()\n//     const filename = e.target.files[0].name\n\n//     reader.onload = event => {\n//       const csvData = PapaParse.parse(\n//         event.target.result,\n//         Object.assign(parserOptions, {\n//           error: onError\n//         })\n//       )\n//       onFileLoaded(csvData.data, filename)\n//     }\n\n//     reader.readAsText(e.target.files[0])\n//   }\n\n//   return (\n//     <div className={cssClass}>\n//       {label && <label htmlFor={inputId}>{label}</label>}\n//       <input\n//         className={cssInputClass}\n//         type='file'\n//         id={inputId}\n//         style={inputStyle}\n//         accept='.csv, text/csv'\n//         onChange={e => change(e)}\n//       />\n//     </div>\n//   )\n// }\n"],"file":"index.js"}