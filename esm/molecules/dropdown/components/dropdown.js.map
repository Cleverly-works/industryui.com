{"version":3,"sources":["../../../../components/molecules/dropdown/components/dropdown.js"],"names":["React","useEffect","useRef","useState","array","bool","func","node","oneOf","string","styled","DropdownMenu","Icon","THEME_POSITION","elementTypes","Colour","List","Dropdown","caret","className","children","elementType","items","onChange","defaultOpen","position","open","setOpen","handleClickAway","event","current","contains","target","document","addEventListener","removeEventListener","Top","StyledDropdown","div","StyledToggle","theme","NAVBAR","colourActive","propTypes","isRequired","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Components - Molecules - Dropdown\n */\n\n// React\nimport React, { useEffect, useRef, useState } from 'react'\nimport { array, bool, func, node, oneOf, string } from 'prop-types'\n\n// Style\nimport styled from 'styled-components'\n\n// UI\nimport { DropdownMenu, Icon } from '../../../'\nimport { THEME_POSITION } from '../../../theme/constants/position'\n\nexport const elementTypes = {\n  Colour: 'colour',\n  List: 'list',\n  Icon: 'icon'\n}\n\nexport const Dropdown = ({\n  caret,\n  className,\n  children,\n  elementType,\n  items,\n  onChange,\n  defaultOpen,\n  position\n}) => {\n  const [open, setOpen] = useState(defaultOpen)\n\n  const node = useRef()\n\n  const handleClickAway = (event) => {\n    if (node.current.contains(event.target)) {\n      return\n    }\n    setOpen(false)\n  }\n\n  useEffect(() => {\n    if (open) {\n      document.addEventListener('mousedown', handleClickAway)\n    } else {\n      document.removeEventListener('mousedown', handleClickAway)\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickAway)\n    }\n  }, [open])\n\n  return (\n    <StyledDropdown className={className} ref={node}>\n      <StyledToggle\n        className={`${open ? 'dropdown--active' : ''} dropdown--toggle`}\n        onClick={() => setOpen(!open)}>\n        {children}\n\n        {caret && (\n          <Icon\n            aria-hidden=\"true\"\n            className=\"dropdown--caret\"\n            icon={position === THEME_POSITION.Top ? 'caret-up' : 'caret-down'}\n            prefix=\"fas\"\n          />\n        )}\n\n        {items && open && (\n          <DropdownMenu\n            closeDropdown={() => setOpen(false)}\n            elementType={elementType ?? elementTypes.List}\n            items={items}\n            position={position}\n            onItemClick={onChange}\n          />\n        )}\n      </StyledToggle>\n    </StyledDropdown>\n  )\n}\n\nconst StyledDropdown = styled.div`\n  display: inline-block;\n  position: relative;\n`\n\nconst StyledToggle = styled.div`\n  color: ${({ theme }) => theme.NAVBAR.colourActive};\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1.5;\n  text-decoration: none;\n`\n\nDropdown.propTypes = {\n  caret: bool,\n  children: node,\n  className: string,\n  elementType: oneOf([\n    elementTypes.Colour,\n    elementTypes.Icon,\n    elementTypes.List\n  ]),\n  items: array.isRequired,\n  onChange: func,\n  position: string\n}\n\nDropdown.defaultProps = {\n  caret: true,\n  position: 'left'\n}\n"],"file":"dropdown.js"}