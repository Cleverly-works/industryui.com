{"version":3,"sources":["../../../../components/molecules/table/components/table.js"],"names":["React","array","bool","func","number","oneOfType","shape","string","TableCaption","TableColumns","TableData","TableRow","TableRows","styled","TableContent","align","caption","className","columns","hover","loading","noData","rowClick","rows","sort","setSort","striped","tableSpan","bottomCells","data","hasData","forEach","element","bottomCell","push","length","map","cell","j","StyledTable","table","theme","TABLE","fontSize","propTypes","isRequired","item","order","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Components - Molecules - Table\n */\n\n// React\nimport React from 'react'\nimport { array, bool, func, number, oneOfType, shape, string } from 'prop-types'\n\n// UI\nimport {\n  TableCaption,\n  TableColumns,\n  TableData,\n  TableRow,\n  TableRows\n} from '../../../'\n\n// Style\nimport styled from 'styled-components'\n\nexport const TableContent = ({\n  align,\n  caption,\n  className,\n  columns,\n  hover,\n  loading,\n  noData,\n  rowClick,\n  rows,\n  sort,\n  setSort,\n  striped,\n  tableSpan\n}) => {\n  const bottomCells = { data: [], hasData: false }\n  columns.forEach((element) => {\n    if (element.bottomCell) {\n      bottomCells.hasData = true\n      bottomCells.data.push(element)\n    } else {\n      bottomCells.data.push(null)\n    }\n  })\n  return (\n    <StyledTable className={className}>\n      {caption !== '' && <TableCaption>{caption}</TableCaption>}\n      {columns && (\n        <TableColumns\n          align={align}\n          columns={columns}\n          setSort={setSort}\n          sort={sort}\n        />\n      )}\n\n      <tbody>\n        {noData && !loading && !rows.length ? (\n          <TableRow>\n            <TableData align=\"center\" colSpan={tableSpan}>\n              No data available\n            </TableData>\n          </TableRow>\n        ) : (\n          <TableRows\n            align={align}\n            bottomCells={bottomCells}\n            columns={columns}\n            hover={hover}\n            rowClick={rowClick}\n            rows={rows}\n            striped={striped}\n          />\n        )}\n        {bottomCells?.hasData && (\n          <TableRow>\n            {bottomCells.data.map((cell, j) => (\n              <TableData key={`bottom${j}`}>\n                {cell ? cell.bottomCell : ''}\n              </TableData>\n            ))}\n          </TableRow>\n        )}\n      </tbody>\n    </StyledTable>\n  )\n}\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: ${({ theme }) => theme.TABLE.fontSize};\n  width: 100%;\n`\n\nTableContent.propTypes = {\n  align: oneOfType([string, bool]),\n  caption: string,\n  className: string,\n  columns: array,\n  hover: bool,\n  loading: bool,\n  noData: bool,\n  rowClick: func,\n  rows: array.isRequired,\n  sort: shape({\n    item: string,\n    order: string\n  }),\n  setSort: func,\n  striped: bool,\n  tableSpan: number\n}\n\nTableContent.defaultProps = {\n  align: false,\n  columns: [],\n  hover: true,\n  loading: false,\n  noData: true,\n  sort: {},\n  striped: true\n}\n"],"file":"table.js"}