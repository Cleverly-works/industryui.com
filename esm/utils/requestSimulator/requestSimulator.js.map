{"version":3,"sources":["../../../components/utils/requestSimulator/requestSimulator.js"],"names":["requestSimulator","responseType","timeout","Promise","resolve","reject","setTimeout","message","Error"],"mappings":";;;AAAA;AACA;AACA;AAEA,gBAAsBA,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,YADK,2DACU,SADV;AAELC,YAAAA,OAFK,2DAEK,IAFL;AAAA;AAAA,mBAIQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5CC,cAAAA,UAAU,CAAC,YAAM;AACf,oBAAIL,YAAY,KAAK,SAArB,EAAgC;AAC9BG,kBAAAA,OAAO,CAAC;AAAEG,oBAAAA,OAAO,EAAE;AAAX,mBAAD,CAAP;AACD,iBAFD,MAEO;AACLF,kBAAAA,MAAM,CAAC,IAAIG,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACD;AACF,eANS,EAMPN,OANO,CAAV;AAOD,aARY,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Mimics a request to server\n */\n\nexport async function requestSimulator(\n  responseType = 'success',\n  timeout = 1000\n) {\n  return await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (responseType === 'success') {\n        resolve({ message: 'Success!' })\n      } else {\n        reject(new Error('Register failed!'))\n      }\n    }, timeout)\n  })\n}\n"],"file":"requestSimulator.js"}