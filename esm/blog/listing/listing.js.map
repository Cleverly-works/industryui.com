{"version":3,"sources":["../../../components/blog/listing/listing.js"],"names":["React","any","string","object","_filter","BlogCard","Column","Row","slugify","BlogListing","articles","author","category","config","tag","_findTag","tags","_findArticle","filter","article","homepage","published","_find","_findMe","sort","a","b","Date","date","slice","map","index","propTypes","isRequired"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,QAAoC,YAApC,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,eAApB,C,CAEA;;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,QAAqC,QAArC;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAiD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,MAApCC,MAAoC,QAApCA,MAAoC;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAC1E,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACL,QAAD,EAAc;AAC7B,WAAON,OAAO,CAACM,QAAD,EAAW;AAAEM,MAAAA,IAAI,EAAE,CAACF,GAAD;AAAR,KAAX,CAAd;AACD,GAFD;;AAIA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACP,QAAD,EAAc;AACjC,WAAOA,QAAQ,CAACQ,MAAT,CAAgB,UAACC,OAAD,EAAa;AAClC,aACEX,OAAO,CAACI,QAAQ,GAAGO,OAAO,CAACP,QAAX,GAAsBO,OAAO,CAACR,MAAvC,CAAP,MACGC,QAAQ,IAAID,MADf,KAEAQ,OAAO,CAACC,QAAR,KAAqB,KAFrB,IAGAD,OAAO,CAACE,SAJV;AAMD,KAPM,CAAP;AAQD,GATD;;AAWA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAIC,OAAO,GAAGb,QAAd;;AAEA,QAAII,GAAJ,EAAS;AACPS,MAAAA,OAAO,GAAGR,QAAQ,CAACL,QAAD,CAAlB;AACD;;AAED,QAAIE,QAAJ,EAAc;AACZW,MAAAA,OAAO,GAAGN,YAAY,CAACP,QAAD,CAAtB;AACD;;AAED,WAAOa,OAAO,CACXC,IADI,CACC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACd,aAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,IAAX,IAAmB,IAAID,IAAJ,CAASF,CAAC,CAACG,IAAX,CAA1B;AACD,KAHI,EAIJC,KAJI,CAIE,CAJF,EAIK,EAJL,CAAP;AAKD,GAhBD;;AAkBA,sBACE,oBAAC,GAAD,gBAEGP,KAAK,GAAGQ,GAAR,CAAY,UAACX,OAAD,EAAUY,KAAV;AAAA,wBACX,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAb;AAAoB,MAAA,EAAE,EAAE;AAAxB,oBACE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEZ,OAAnB;AAA4B,MAAA,MAAM,EAAEN;AAApC,MADF,CADW;AAAA,GAAZ,CAFH,CADF;AAUD,CA5CM;AAAMJ,W;AA8CbA,WAAW,CAACuB,SAAZ,GAAwB;AACtBtB,EAAAA,QAAQ,EAAET,GAAG,CAACgC,UADQ;AAEtBtB,EAAAA,MAAM,EAAET,MAFc;AAGtBU,EAAAA,QAAQ,EAAEV,MAHY;AAItBW,EAAAA,MAAM,EAAEV,MAJc;AAKtBW,EAAAA,GAAG,EAAEZ;AALiB,CAAxB","sourcesContent":["/**\n * Components - Blog - Listing\n * Displays articles cards from selected author, category or tag\n *\n * - Published is true\n * - Homepage is not false\n * - Sorted and filtered by date\n */\n\n// React\nimport React from 'react'\nimport { any, string, object } from 'prop-types'\n\n// Lodash\nimport _filter from 'lodash/filter'\n\n// UI\nimport { BlogCard } from '../card/card'\nimport { Column, Row, slugify } from '../../'\n\nexport const BlogListing = ({ articles, author, category, config, tag }) => {\n  const _findTag = (articles) => {\n    return _filter(articles, { tags: [tag] })\n  }\n\n  const _findArticle = (articles) => {\n    return articles.filter((article) => {\n      return (\n        slugify(category ? article.category : article.author) ===\n          (category || author) &&\n        article.homepage !== false &&\n        article.published\n      )\n    })\n  }\n\n  const _find = () => {\n    let _findMe = articles\n\n    if (tag) {\n      _findMe = _findTag(articles)\n    }\n\n    if (category) {\n      _findMe = _findArticle(articles)\n    }\n\n    return _findMe\n      .sort((a, b) => {\n        return new Date(b.date) - new Date(a.date)\n      })\n      .slice(0, 10)\n  }\n\n  return (\n    <Row>\n      here\n      {_find().map((article, index) => (\n        <Column key={index} md={6}>\n          <BlogCard article={article} config={config} />\n        </Column>\n      ))}\n    </Row>\n  )\n}\n\nBlogListing.propTypes = {\n  articles: any.isRequired,\n  author: string,\n  category: string,\n  config: object,\n  tag: string\n}\n"],"file":"listing.js"}